from buildbot.plugins import *

repos = [
    ('https://github.com/eubr-bigsea/seed.git', 'seed'),
    ('https://github.com/eubr-bigsea/tahiti.git', 'tahiti'),
    ('https://github.com/eubr-bigsea/juicer.git', 'juicer'),
    ('https://github.com/eubr-bigsea/citrus.git', 'citrus'),
    ('https://github.com/eubr-bigsea/caipirinha.git', 'caipirinha'),
    ('https://github.com/eubr-bigsea/limonero.git', 'limonero'),
    ('https://github.com/eubr-bigsea/stand.git', 'stand'),
    ('https://github.com/eubr-bigsea/thorn.git', 'thorn'),
]

repos02 = [
    ('https://github.com/eubr-bigsea/citrus.git', 'citrus'),
]

yaml_config = {
    'tahiti': 'tahiti-config',
    'juicer': 'juicer-config',
    'seed': 'seed-config',
    'citrus': 'citrus-config',
    'caipirinha': 'caipirinha-config',
    'limonero': 'limonero-config',
    'stand': 'stand-config',
    'thorn': 'thorn-config',
}

c = BuildmasterConfig = {}

# Defining workers
c['workers'] = [worker.Worker("worker1", "pass")]

# Configuring protocols
c['protocols'] = {'pb': {'port': 9989}}

# Configuring change sources
c['change_source'] = []
for (repo, name) in repos:
    c['change_source'].append(changes.GitPoller(
        repourl=repo, project=name,
        workdir=f'gitpoller-workdir/{name}/', branch='develop',
        pollInterval=60))

# Configuring schedulers
c['schedulers'] = []
for (repo, name) in repos:
    c['schedulers'].append(
        schedulers.SingleBranchScheduler(
            name=f"scheduler_{name}",
            change_filter=util.ChangeFilter(branch='develop', project=name),
            treeStableTimer=None,
            builderNames=[f"build_{name}"]))

    c['schedulers'].append(schedulers.ForceScheduler(
        name=f"force_{name}",
         builderNames=[f"build_{name}"]))

# Configuring builders
c['builders'] = []
log_environ = False
for (repo, name) in repos:
    factory = util.BuildFactory()

    # Check out the source
    factory.addStep(steps.Git(repourl=repo, branch='develop', mode='incremental', logEnviron=log_environ))

    revision = util.Interpolate('REVISION=%(prop:got_revision)s')

    # Create Python virtual environment
    factory.addStep(steps.ShellCommand(
        name="Create Python virtual environment",
        command=['python3', '-m', 'venv', f'../venv_{name}'],
        description="Creating virtual environment",
        logEnviron=log_environ))

    # Activate Python virtual environment
    factory.addStep(steps.ShellCommand(
        name="Activate Python virtual environment",
        command=['bash', '-c', f'source ../venv_{name}/bin/activate'],
        description="Activating virtual environment",
        logEnviron=log_environ))

    if name == 'citrus':
    	# Install Node.js and npm locally (without sudo)
    	factory.addStep(steps.ShellCommand(
            name="Install Node.js and npm",
            command=['npm', 'install', '--user', 'nodejs', 'npm'],
            description="Installing Node.js and npm",
            logEnviron=log_environ))

    	# Install create-vite locally
    	factory.addStep(steps.ShellCommand(
            name="Install create-vite",
            command=['npx', 'create-vite'],
            description="Installing create-vite",
            logEnviron=log_environ))

    else:
        # Upgrade pip to the latest version (optional)
        factory.addStep(steps.ShellCommand(
            name="Upgrade pip",
            command=['pip', 'install', '--upgrade', 'pip'],
            description="Upgrading pip to the latest version",
            logEnviron=log_environ))

        # Download dependencies
        factory.addStep(steps.ShellCommand(
            name="Download dependencies",
            command=['pip', 'install', '-r', 'requirements.txt'],
            description="Downloading dependencies",
            logEnviron=log_environ))

        # Run the tests
        config_name = f'./conf/{yaml_config.get(name, name)}.yaml.template'
        # Set Permissions for tests directory
        factory.addStep(steps.ShellCommand(
            name="Set Permissions for tests directory",
            command=["chmod", "+rx", "../build/tests"],
            description="Setting permissions for tests directory",
            logEnviron=log_environ))

        # Enter the tests directory
        factory.addStep(steps.ShellCommand(
            name="Change to tests directory",
            command=["bash", "-c", "cd ../build/tests"],
            description="Changing to tests directory",
            logEnviron=log_environ))

        # Run the tests with pytest
        factory.addStep(steps.Test(
            name="Run tests",
            command=["pytest"],
            env={"PYTHONPATH": ".", f'{name.upper()}_CONFIG': config_name, 'FLASK_APP': f'{name}.app'},
            description="Running tests",
            logEnviron=log_environ,
            haltOnFailure=False))

    # Quay.io Login
    factory.addStep(steps.ShellCommand(
        name="Quay.io Login",
        command=["docker", "login", "-u", "luiz20hdsg", "-p", "docker+1204", "quay.io"],
        description="Fazendo login no Quay.io",
        logEnviron=log_environ))

    # Create Docker image
    factory.addStep(steps.ShellCommand(
        name="Create Docker image",
        command=[f"docker", "build", "-t", util.Interpolate(f'quay.io/lemonade/{name}:3.0.0-SNAPSHOT.%(prop:got_revision)s'), '.'],
        description="Building Docker image",
        env={},
        logEnviron=log_environ,
        haltOnFailure=False))

    # Push Docker image to DockerHub
    factory.addStep(steps.ShellCommand(
        name="Push Docker image to Quay.io",
        command=[f"docker", "push", util.Interpolate(f'quay.io/lemonade/{name}:3.0.0-SNAPSHOT.%(prop:got_revision)s')],
        description="Pushing Docker image to Quay.io",
        env={},
        logEnviron=log_environ,
        haltOnFailure=False))

    c['builders'].append(util.BuilderConfig(
        name=f"build_{name}",
        workernames=["worker1"],
        factory=factory))

# Configuring buildbot services
c['services'] = []

# Configuring project identity
c['title'] = "Lemonade .::. CI"
c['titleURL'] = "https://www.lemonade.org.br/"
c['buildbotURL'] = "http://localhost:8010/"
c['www'] = dict(port=8010, plugins=dict(waterfall_view={}, console_view={}, grid_view={}))

# Configuring DB URL
c['db'] = {
    'db_url': "sqlite:///state.sqlite",
}
c['buildbotNetUsageData'] = None

